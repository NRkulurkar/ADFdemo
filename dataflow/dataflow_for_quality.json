{
	"name": "dataflow_for_quality",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Emp_dataset",
						"type": "DatasetReference"
					},
					"name": "sourcedata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "valid_data",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "invalidrecord",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "validationrules"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     id as integer",
				"}",
				"source(output(",
				"          id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          location as string,",
				"          {department\\r} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcedata",
				"sourcedata assert(expectTrue(between(id,1,20), false, 'valid')) ~> validationrules",
				"validationrules split(!hasError('valid'),",
				"     disjoint: false) ~> split1@(validdata, invaliddata)",
				"split1@validdata sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"split1@invaliddata sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}